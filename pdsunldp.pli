 /************************ PDSUNLDP - PL/1 F VERSION *****************
       PROGRAM-ID. PDSUNLDP.
       AUTHOR. ED LISS.
       DATE-WRITTEN. MARCH, 2010.
       DATE-COMPILED.
       REMARKS. THIS PROGRAM READS A PDS AND WRITES EACH MEMBER WITH
            AN ./ ADD SUITABLE FOR RELOADING USING IEBUPDTX OR
            IEBUPDTE.  THE './ ADD NAME=XXXXXXXX' IS GENERATED FOR
            EACH MEMBER.  IF A EXEC_CARD PARM IS PASSED, THE PARM
            IS APPENDED I.E.  './ ADD NAME=XXXXXXXX,PARM'.  USING
            THE PARM ENABLES UTILITY CONTROL STATEMENTS FOR
            IEBUPDTE OR IEBUPDTX TO BE GENERATED.

            VERSION     DATE     COMMENTS
            -------   ---------  ---------------------------------
             1.0.0      03/2010  ORIGINAL VERSION
             1.1.0    06/17/2010 CHANGED SO ONLY NAME PARM
                                 IS GENERATED.  IF AN EXEC PARM
                                 IS PASSED, IT WILL BE ADDED TO
                                 THE ./ ADD NAME=,PARM
             1.2.0    03/19/2023 CODE CLEANUP AND ADDED ISPF/RPF
                                 STATS TO REPORT

 ********************************************************************/

 PDSUNLD:PROCEDURE(EXEC_PARM) OPTIONS(MAIN);

     DECLARE EXEC_PARM CHAR(100) VARYING;
     DECLARE CARD_FILE STREAM OUTPUT FILE;
     DECLARE
        1  WS_MEMBER_COUNT       FIXED BINARY(31) ALIGNED INITIAL(0);

 /*#INCLUDE GETPDSPA.PLI*/
   %INCLUDE GETPDSPA;
1
 /*#INCLUDE DATECNVP.PLI*/
   %INCLUDE DATECNVP;

     DECLARE NAME_WORK            CHAR(8),
             1 NAME_WORK_CHARS DEFINED NAME_WORK,
               2 NAME_WORK_CHAR(8) CHAR(1);
     DECLARE NAME_STR             CHAR(8) VARYING;
     DECLARE CHAR_INDEX           FIXED BINARY ALIGNED;
     DECLARE (PAGE_NUM,
              REC_COUNT)          FIXED BINARY ALIGNED
                                  INIT(0);
1    ON ENDPAGE(SYSPRINT)
     BEGIN;
        PAGE_NUM = PAGE_NUM + 1;
        PUT PAGE EDIT('PDSUNLDP V1.2.0','PAGE ',PAGE_NUM)
                     (A,COL(110),A,P'ZZ9');
        IF PAGE_NUM = 1 &
           LENGTH(EXEC_PARM)>0 THEN
              PUT SKIP EDIT(' WITH PARM=',EXEC_PARM) (A,A);
        PUT SKIP EDIT('MEMBER    USERID  CREATED    UPDATED      TIME',
                      '   COMMENTS') (A,A);
        PUT SKIP;
     END;
     SIGNAL ENDPAGE(SYSPRINT);
     OPEN FILE(CARD_FILE) OUTPUT TITLE('CARDOUT');
     CALL P100_OPEN_PDS;
     CALL P600_CLOSE_PDS;

     PUT SKIP EDIT('MEMBER PROCESSED=',WS_MEMBER_COUNT)(A,F(10));
     CLOSE FILE(CARD_FILE);
     PUT SKIP(2) EDIT('PDSUNLDP V1.2.0 ENDED') (A);

-P100_OPEN_PDS:PROC;
     PDSGET_REQUEST = PDSGET_REQUEST_OPEN;
     PDSGET_MEMBER  = 'PDSIN   ';
     CALL P900_CALL_GETPDSP;
     IF PDSGET_RETURN_CODE = 0 THEN
         CALL P200_START_DIR;
     ELSE
     IF PDSGET_RETURN_CODE = 4 THEN
         PUT SKIP LIST('OPEN FAILED (RC=4)');
     ELSE
     IF PDSGET_RETURN_CODE = 8 THEN
     DO;
         PUT SKIP LIST('OPEN FAILED (RC=8); EXECUTION TERMINATED');
         STOP;
     END;
 END P100_OPEN_PDS;
-P200_START_DIR:PROC;
     PDSGET_REQUEST = PDSGET_REQUEST_START;
     CALL P900_CALL_GETPDSP;
     IF PDSGET_RETURN_CODE = 0 THEN
         CALL P300_NEXT_DIR;
     ELSE
     IF PDSGET_RETURN_CODE = 4 THEN
         PUT SKIP LIST('START FAILED (RC=4)');
     ELSE
     IF PDSGET_RETURN_CODE = 8 THEN
     DO;
         PUT SKIP LIST('START FAILED (RC=8); EXECUTION TERMINATED');
         STOP;
     END;
 END P200_START_DIR;
-P300_NEXT_DIR:PROC;
     PDSGET_RETURN_CODE = 0;
     DO WHILE(PDSGET_RETURN_CODE = 0);
         PDSGET_REQUEST = PDSGET_REQUEST_NEXT;
         CALL P900_CALL_GETPDSP;
         IF PDSGET_RETURN_CODE = 0 THEN
         DO;
             CALL P400_LOCATE_MEMBER;
             PDSGET_RETURN_CODE = 0;
         END;
         ELSE
         IF PDSGET_RETURN_CODE = 4 THEN
             PUT SKIP(2) LIST('END OF DIRECTORY (RC=4)');
         ELSE
         IF PDSGET_RETURN_CODE = 8 THEN
         DO;
             PUT SKIP LIST(
                          'NEXT FAILED (RC=8); EXECUTION TERMINATED');
             STOP;
         END;
     END; /* DO UNTIL */
 END P300_NEXT_DIR;
-P400_LOCATE_MEMBER:PROC;
     PDSGET_REQUEST = PDSGET_REQUEST_LOCATE;
     CALL P900_CALL_GETPDSP;
     IF PDSGET_RETURN_CODE = 0 THEN
     DO;
     /*  PUT SKIP LIST('MEMBER NAME=',PDSGET_MEMBER);  */
         CALL P700_PROCESS_STATS;
         CALL P500_READ_MEMBER;
     END;
     ELSE
     IF PDSGET_RETURN_CODE = 4 THEN
         PUT SKIP LIST('MEMBER NOT FOUND (RC=4)');
     ELSE
         IF PDSGET_RETURN_CODE = 8 THEN
         DO;
             PUT SKIP LIST(
                       'LOCATE FAILED (RC=8); EXECUTION TERMINATED');
             STOP;
         END;
 END P400_LOCATE_MEMBER;
-P500_READ_MEMBER:PROC;
     PDSGET_REQUEST = PDSGET_REQUEST_READ;
     CALL P900_CALL_GETPDSP;
     WS_MEMBER_COUNT=WS_MEMBER_COUNT+1;
     IF PDSGET_RETURN_CODE = 0 THEN
     DO;
         REC_COUNT=0;
         NAME_WORK=PDSGET_MEMBER;
         NAME_STR='';
         DO CHAR_INDEX=1 TO 8;
             IF NAME_WORK_CHAR(CHAR_INDEX) > ' ' THEN
                 NAME_STR=NAME_STR || NAME_WORK_CHAR(CHAR_INDEX);
         END;
         PUT FILE(CARD_FILE) EDIT('./  ADD NAME=',NAME_STR)
                                 (A);
         IF LENGTH(EXEC_PARM)>0 THEN
            PUT FILE(CARD_FILE) EDIT(',',EXEC_PARM)
                                 (A,A);
         DO WHILE (PDSGET_RETURN_CODE = 0);
            PUT FILE(CARD_FILE) EDIT(PDSGET_RECORD80) (SKIP,A);
            REC_COUNT=REC_COUNT+1;
            CALL P900_CALL_GETPDSP;
         END;
     END;

     IF PDSGET_RETURN_CODE = 4 THEN
         PUT EDIT('END OF MEMBER (RC=4)',REC_COUNT,' RECORDS READ')
                 (X(2),A,F(5),A);
     ELSE
         IF PDSGET_RETURN_CODE = 8 THEN
         DO;
             PUT SKIP LIST(
                       'READ FAILED (RC=8); EXECUTION TERMINATED');
             STOP;
         END;
 END P500_READ_MEMBER;
-P600_CLOSE_PDS:PROC;
     PDSGET_REQUEST = PDSGET_REQUEST_CLOSE;
     CALL P900_CALL_GETPDSP;
     IF PDSGET_RETURN_CODE = 4 THEN
         PUT SKIP LIST('CLOSE FAILED (RC=4)');
     ELSE
     IF PDSGET_RETURN_CODE = 8 THEN
     DO;
         PUT SKIP LIST('CLOSE FAILED (RC=8); EXECUTION TERMINATED');
         STOP;
     END;
 END P600_CLOSE_PDS;
-P700_PROCESS_STATS:PROC;
     DECLARE  DATE_WORK                CHAR(10),
              DATE_CONV                PIC '(7)9BBB',
              TIME_WORK                CHAR(5);

     PDSGET_PTR = ADDR(PDSGET_RECORD80);
     PUT SKIP EDIT(PDSGET_MEMBER,PDS_USER_ID) (A,X(2),A);
     IF PDS_USER_ID = (8)' ' THEN RETURN;

     DC_INPUT_FORMAT =  'YYYYDDD ';
     DATE_CONV       =   PDS_DATE_CREATED;
     DC_INPUT_DATE   =   DATE_CONV;
     DC_OUTPUT_FORMAT = 'YYYYMMDD';
     CALL DATCNVP(DATECNV_PARM);
     PUT EDIT(SUBSTR(DC_OUTPUT_DATE,1,4),'/') (A,A)
             (SUBSTR(DC_OUTPUT_DATE,5,2),'/') (A,A)
             (SUBSTR(DC_OUTPUT_DATE,7,2),' ') (A,A);

     DC_INPUT_FORMAT =  'YYYYDDD ';
     DATE_CONV       =   PDS_DATE_UPDATED;
     DC_INPUT_DATE   =   DATE_CONV;
     DC_OUTPUT_FORMAT = 'YYYYMMDD';
     CALL DATCNVP(DATECNV_PARM);
     PUT EDIT(SUBSTR(DC_OUTPUT_DATE,1,4),'/') (A,A)
             (SUBSTR(DC_OUTPUT_DATE,5,2),'/') (A,A)
             (SUBSTR(DC_OUTPUT_DATE,7,2),' ') (A,A);

     SUBSTR(TIME_WORK,1,2) = PDS_TIME_CONVERSION(PDS_TIME_CHANGED_H);
     SUBSTR(TIME_WORK,3,1) = ':';
     SUBSTR(TIME_WORK,4,2) = PDS_TIME_CONVERSION(PDS_TIME_CHANGED_M);

     PUT EDIT(TIME_WORK) (X(2),A);

 END P700_PROCESS_STATS;
-P900_CALL_GETPDSP:PROC;
     CALL GETPDSP (PDSGET_REQUEST_1,
                   PDSGET_MEMBER_1,
                   PDSGET_RECORD80_1,
                   PDSGET_RETURN_CODE_1);
 END P900_CALL_GETPDSP;

 END PDSUNLD;
